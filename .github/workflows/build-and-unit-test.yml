name: Build and Unit Test
on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
    # workaround to run manual trigger for a particular branch
    inputs:
      branch:
        description: "branch name on which workflow will be triggered"
        required: true
        default: "develop"

env:
  TAG_NAME: latest
  PRE_RELEASE: true

jobs:
  test-logging:
    steps:
      - name: check gcloud installed/authed
        run: gcloud projects list

  # set-branch-matrix:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: set-matrix on schedule run
  #       id: set-matrix-on-schedule-run
  #       if: github.event_name != 'workflow_dispatch'
  #       run: echo "::set-output name=matrix::{\"include\":[{\"branch\":\"develop\"},{\"branch\":\"release/6.6\"}, {\"branch\":\"release/6.7\"}]}"

  #     - name: set-matrix on manual trigger
  #       id: set-matrix-on-manual-trigger
  #       if: github.event_name == 'workflow_dispatch'
  #       run: echo "::set-output name=matrix::{\"include\":[{\"branch\":\"${{ github.event.inputs.branch }}\"}]}"

  #     - name: set-matrix-output
  #       id: set-matrix-output
  #       run: |
  #         if [ -z "$MANUAL_TRIGGER_OUTPUT" ];
  #         then
  #           echo "::set-output name=matrix::${SCHEDULE_RUN_OUTPUT}"
  #         else
  #           echo "::set-output name=matrix::${MANUAL_TRIGGER_OUTPUT}"
  #         fi
  #       env:
  #         MANUAL_TRIGGER_OUTPUT: ${{ steps.set-matrix-on-manual-trigger.outputs.matrix }}
  #         SCHEDULE_RUN_OUTPUT: ${{ steps.set-matrix-on-schedule-run.outputs.matrix }}

  #   outputs:
  #     matrix: ${{ steps.set-matrix-output.outputs.matrix }}

  # build:
  #   needs: set-branch-matrix
  #   runs-on: cdapio-hub-k8-runner

  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJson(needs.set-branch-matrix.outputs.matrix) }}

  #   steps:
  #     - name: Get Secrets from GCP Secret Manager
  #       id: 'secrets'
  #       uses: 'google-github-actions/get-secretmanager-secrets@v0'
  #       with:
  #         secrets: |-
  #           CDAP_OSSRH_USERNAME:cdapio-github-builds/CDAP_OSSRH_USERNAME
  #           CDAP_OSSRH_PASSWORD:cdapio-github-builds/CDAP_OSSRH_PASSWORD
  #           CDAP_GPG_PASSPHRASE:cdapio-github-builds/CDAP_GPG_PASSPHRASE
  #           CDAP_GPG_PRIVATE_KEY:cdapio-github-builds/CDAP_GPG_PRIVATE_KEY

  #     - name: Recursively Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         submodules: recursive
  #         path: cdap-build
  #         ref: ${{ matrix.branch }}

  #     - name: Update Submodules
  #       working-directory: cdap-build
  #       run: |
  #         git submodule update --init --recursive --remote

  #     - name: Cache
  #       uses: actions/cache@v2.1.3
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ github.workflow }}-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-maven-${{ github.workflow }}

  #     - name: Set up Artifact Name
  #       # Removes invalid artifact name characters: ",:,<,>,|,*,?,\,/.
  #       run: |
  #         name=$(echo -n "${{ matrix.branch }}" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
  #         echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV

  #     - name: Run Tests
  #       working-directory: cdap-build
  #       run: MAVEN_OPTS="-Xmx16G -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/cdap-build/oom.bin" mvn test -Drat.skip=true -fae -T2C -U -V -am -amd -P templates,unit-tests --fail-at-end -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=30

  #     - name: Archive build artifacts
  #       uses: actions/upload-artifact@v2.2.2
  #       if: always()
  #       with:
  #         name: Build debug files - ${{ env.ARTIFACT_NAME }}
  #         path: |
  #           **/target/rat.txt
  #           **/target/surefire-reports/*
  #           /cdap-build/oom.bin

  #     - name: Surefire Report
  #       # Pinned 1.0.5 version
  #       uses: ScaCap/action-surefire-report@ad808943e6bfbd2e6acba7c53fdb5c89534da533
  #       if: always()
  #       with:
  #         # GITHUB_TOKEN
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         check_name: Test Report - ${{ env.ARTIFACT_NAME }}
  #         commit: ${{ github.sha }}

  #     - name: Build Standalone
  #       working-directory: cdap-build
  #       run: MAVEN_OPTS="-Xmx12G" mvn -Drat.skip=true -e -T2C clean package -Dgpg.skip -DskipTests -Ddocker.skip=true -nsu -am -amd -P templates,dist,release -Dadditional.artifacts.dir=$(pwd)/app-artifacts -Dsecurity.extensions.dir=$(pwd)/security-extensions -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=30

  #     - name: Find Build Version
  #       working-directory: cdap-build/cdap
  #       run:  |
  #         export VERSION=$(ls cdap-standalone/target/cdap-sandbox*zip | cut --delimiter=- --fields="-3" --complement | rev | cut --delimiter="." --fields=1 --complement | rev)
  #         echo "CDAP_VERSION=${VERSION}"
  #         echo "CDAP_VERSION=${VERSION}" >> $GITHUB_ENV
  #         if [[ $VERSION != *-SNAPSHOT ]];
  #         then
  #           echo "PRE_RELEASE=false" >> $GITHUB_ENV
  #         else
  #           echo "SNAPSHOT VERSION"
  #         fi

  #     - name: Set up GPG conf
  #       run: |
  #         echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
  #         echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf

  #     - name: Import GPG key
  #       run: |
  #         echo "$GPG_PRIVATE_KEY" > private.key
  #         gpg --import --batch private.key
  #       env:
  #         GPG_PRIVATE_KEY: ${{ steps.secrets.outputs.CDAP_GPG_PRIVATE_KEY }}

  #     - name: Deploy Maven
  #       working-directory: cdap-build
  #       run: mvn deploy -B -V -DskipTests -DskipLocalStaging=true -Ddocker.skip=true -P templates,dist,release,rpm-prepare,rpm,deb-prepare,deb,tgz,unit-tests -Dadditional.artifacts.dir=$(pwd)/app-artifacts -Dsecurity.extensions.dir=$(pwd)/security-extensions -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=30 -Dmaven.wagon.http.retryHandler.requestSentEnabled=true -Dgpg.passphrase=$CDAP_GPG_PASSPHRASE
  #       env:
  #         CDAP_OSSRH_USERNAME: ${{ steps.secrets.outputs.CDAP_OSSRH_USERNAME }}
  #         CDAP_OSSRH_PASSWORD: ${{ steps.secrets.outputs.CDAP_OSSRH_PASSWORD }}
  #         CDAP_GPG_PASSPHRASE: ${{ steps.secrets.outputs.CDAP_GPG_PASSPHRASE }}
  #         MAVEN_OPTS: "-Xmx12G"

  #     - name: Build DEB Bundle
  #       working-directory: cdap-build/cdap
  #       run: |
  #         mkdir -p cdap-distributions/target/deb-bundle-tmp
  #         cd cdap-distributions/target/deb-bundle-tmp
  #         cp ../../../*/target/*.deb .
  #         tar zcf ../cdap-distributed-deb-bundle-${{env.CDAP_VERSION}}.tgz *.deb

  #     - name: Set up Tag
  #       working-directory: cdap-build
  #       run: |
  #         if [ ${{ matrix.branch }} != "develop" ];
  #         then
  #           echo "TAG_NAME=v$CDAP_VERSION" >> $GITHUB_ENV
  #           echo "TAG_NAME=v$CDAP_VERSION"
  #           git tag -f v$CDAP_VERSION
  #         else
  #           git tag -f ${{ env.TAG_NAME }}
  #         fi
  #         git push -f origin --tags

  #     - name: Upload CDAP Standalone and CDAP DEB Bundle
  #       uses: ncipollo/release-action@58ae73b360456532aafd58ee170c045abbeaee37
  #       with:
  #         allowUpdates: true
  #         prerelease: ${{ env.PRE_RELEASE }}
  #         replacesArtifacts: true
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         tag: ${{ env.TAG_NAME }}
  #         body: Cask Data Appplication Platform - Release ${{ env.CDAP_VERSION }}
  #         artifacts: |
  #           cdap-build/cdap/cdap-standalone/target/cdap-sandbox-${{env.CDAP_VERSION}}.zip,cdap-build/cdap/cdap-distributions/target/cdap-distributed-deb-bundle-${{env.CDAP_VERSION}}.tgz
