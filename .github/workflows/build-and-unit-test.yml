name: Build and Unit Test
on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
    # workaround to run manual trigger for a particular branch
    inputs:
      branch:
        description: "branch name on which workflow will be triggered"
        required: true
        default: "develop"

env:
  TAG_NAME: latest

jobs:

  set-branch-matrix:
    runs-on: ubuntu-latest

    steps:
      - name: set-matrix on schedule run
        id: set-matrix-on-schedule-run
        if: github.event_name != 'workflow_dispatch'
        run: echo "::set-output name=matrix::{\"include\":[{\"branch\":\"develop\"},{\"branch\":\"release/6.6\"}, {\"branch\":\"release/6.7\"}]}"

      - name: set-matrix on manual trigger
        id: set-matrix-on-manual-trigger
        if: github.event_name == 'workflow_dispatch'
        run: echo "::set-output name=matrix::{\"include\":[{\"branch\":\"${{ github.event.inputs.branch }}\"}]}"

      - name: set-matrix-output
        id: set-matrix-output
        run: |
          if [ -z "$MANUAL_TRIGGER_OUTPUT" ];
          then
            echo "::set-output name=matrix::${SCHEDULE_RUN_OUTPUT}"
          else
            echo "::set-output name=matrix::${MANUAL_TRIGGER_OUTPUT}"
          fi
        env:
          MANUAL_TRIGGER_OUTPUT: ${{ steps.set-matrix-on-manual-trigger.outputs.matrix }}
          SCHEDULE_RUN_OUTPUT: ${{ steps.set-matrix-on-schedule-run.outputs.matrix }}

    outputs:
      matrix: ${{ steps.set-matrix-output.outputs.matrix }}

  build:
    needs: set-branch-matrix
    runs-on: cdapio-hub-k8-runner

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-branch-matrix.outputs.matrix) }}

    steps:
      - name: Get Secrets from GCP Secret Manager
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v0'
        with:
          secrets: |-
            CDAP_OSSRH_USERNAME:cdapio-github-builds/CDAP_OSSRH_USERNAME
            CDAP_OSSRH_PASSWORD:cdapio-github-builds/CDAP_OSSRH_PASSWORD
            CDAP_GPG_PASSPHRASE:cdapio-github-builds/CDAP_GPG_PASSPHRASE
            CDAP_GPG_PRIVATE_KEY:cdapio-github-builds/CDAP_GPG_PRIVATE_KEY
            CASK_DOCKER_HUB_USERNAME:cdapio-github-builds/CASK_DOCKER_HUB_USERNAME
            CASK_DOCKER_HUB_PASSWORD:cdapio-github-builds/CASK_DOCKER_HUB_PASSWORD

      - name: Recursively Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          path: cdap-build
          ref: ${{ matrix.branch }}

      - name: Update Submodules
        working-directory: cdap-build
        run: |
          git submodule update --init --recursive --remote

      - name: Cache
        uses: actions/cache@v2.1.3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ github.workflow }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ github.workflow }}

#      - name: Set up Artifact Name
#        run: |
#          name=$(echo -n "${{ matrix.branch }}" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
#          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
#
#      - name: Run Tests
#        working-directory: cdap-build
#        run: MAVEN_OPTS="-Xmx16G -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/cdap-build/oom.bin" mvn test -Drat.skip=true -fae -T2C -U -V -am -amd -P templates,unit-tests --fail-at-end -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=30
#
#      - name: Archive build artifacts
#        uses: actions/upload-artifact@v2.2.2
#        if: always()
#        with:
#          name: Build debug files - ${{ env.ARTIFACT_NAME }}
#          path: |
#            **/target/rat.txt
#            **/target/surefire-reports/*
#            /cdap-build/oom.bin
#
#      - name: Surefire Report
#        # Pinned 1.0.5 version
#        uses: ScaCap/action-surefire-report@ad808943e6bfbd2e6acba7c53fdb5c89534da533
#        if: always()
#        with:
#          # GITHUB_TOKEN
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          check_name: Test Report - ${{ env.ARTIFACT_NAME }}

#      - name: Build Standalone
#        working-directory: cdap-build
#        run: MAVEN_OPTS="-Xmx12G" mvn -Drat.skip=true -e -T2C clean package -Dgpg.skip -DskipTests -Ddocker.skip=true -nsu -am -amd -P templates,dist,release -Dadditional.artifacts.dir=$(pwd)/app-artifacts -Dsecurity.extensions.dir=$(pwd)/security-extensions -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=30
#
#      - name: Find Build Version
#        working-directory: cdap-build/cdap
#        run: |
#          export VERSION=$(ls cdap-standalone/target/cdap-sandbox*zip | cut --delimiter=- --fields="-3" --complement | rev | cut --delimiter="." --fields=1 --complement | rev)
#          echo "CDAP_VERSION=${VERSION}"
#          echo "CDAP_VERSION=${VERSION}" >> $GITHUB_ENV
#
#      - name: Set up GPG conf
#        run: |
#          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
#          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
#
#      - name: Import GPG key
#        run: |
#          echo "$GPG_PRIVATE_KEY" > private.key
#          gpg --import --batch private.key
#        env:
#          GPG_PRIVATE_KEY: ${{ steps.secrets.outputs.CDAP_GPG_PRIVATE_KEY }}

#      - name: Deploy Maven
#        working-directory: cdap-build
#        run: mvn deploy -B -V -DskipTests -DskipLocalStaging=true -Ddocker.skip=true -P templates,release,unit-tests -Dadditional.artifacts.dir=$(pwd)/app-artifacts -Dsecurity.extensions.dir=$(pwd)/security-extensions -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=30 -Dmaven.wagon.http.retryHandler.requestSentEnabled=true -Dgpg.passphrase=$CDAP_GPG_PASSPHRASE
#        env:
#          CDAP_OSSRH_USERNAME: ${{ steps.secrets.outputs.CDAP_OSSRH_USERNAME }}
#          CDAP_OSSRH_PASSWORD: ${{ steps.secrets.outputs.CDAP_OSSRH_PASSWORD }}
#          CDAP_GPG_PASSPHRASE: ${{ steps.secrets.outputs.CDAP_GPG_PASSPHRASE }}
#          MAVEN_OPTS: "-Xmx12G"

#      - name: Build DEB Bundle
#        working-directory: cdap-build/cdap
#        run: |
#          mkdir -p cdap-distributions/target/deb-bundle-tmp
#          cd cdap-distributions/target/deb-bundle-tmp
#          cp ../../../*/target/*.deb .
#          tar zcf ../cdap-distributed-deb-bundle-${{env.CDAP_VERSION}}.tgz *.deb

#      - name: Set up Tag
#        working-directory: cdap-build
#        run: |
#          if [ ${{ matrix.branch }} != "develop" ];
#          then
#            echo "TAG_NAME=v$CDAP_VERSION"
#            echo "TAG_NAME=v$CDAP_VERSION" >> $GITHUB_ENV
#          fi
#          git tag -f $TAG_NAME
#          git push -f origin --tags
#        env:
#          TAG_NAME: ${{ env.TAG_NAME }}
#
#      - name: Upload CDAP Standalone and CDAP DEB Bundle
#        uses: ncipollo/release-action@58ae73b360456532aafd58ee170c045abbeaee37
#        with:
#          allowUpdates: true
#          prerelease: true
#          replacesArtifacts: true
#          token: ${{secrets.GITHUB_TOKEN}}
#          tag: ${{env.TAG_NAME}}
#          artifacts: |
#            cdap-build/cdap/cdap-standalone/target/cdap-sandbox-${{env.CDAP_VERSION}}.zip
#           cdap-build/cdap/cdap-distributions/target/cdap-distributed-deb-bundle-${{env.CDAP_VERSION}}.tgz

#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6
#        with:
#          install: true
#
#      - name: Login to DockerHub
#        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
#        with:
#          username: ${{ steps.secrets.outputs.CASK_DOCKER_HUB_USERNAME }}
#          password: ${{ steps.secrets.outputs.CASK_DOCKER_HUB_PASSWORD }}
#
#      - name: Build and Push Docker Image
#        uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94
#        with:
#          push: true
#          no-cache: true
#          file: cdap-build/cdap/cdap-distributions/src/Dockerfile
#          tags: caskdata/cdap-sandbox:${{env.CDAP_VERSION}}

  deploy-docker:
    needs: build
    uses: cdapio/cdap-build/.github/workflows/deploy-docker.yml@210089dfcef51a9cb18e726399500af444a5ce9a
    with:
      TAG_NAME: ${{ env.TAG_NAME }}
    secrets:
      DOCKER_HUB_USERNAME: ${{ needs.build.steps.secrets.outputs.CASK_DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ needs.build.steps.secrets.outputs.CASK_DOCKER_HUB_PASSWORD }}